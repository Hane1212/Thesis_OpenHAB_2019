# This script allow to create trace in xml format
import re
import time
import datetime
import xml.etree.ElementTree as ET
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
from xml.dom import minidom
from collections import OrderedDict
# from ElementTree_pretty import prettify
traceF = '/Users/huongta/Home/Internship/openhab/openhab-2/userdata/logs/30/trace.xml'
traceS = '/Users/huongta/Home/Internship/openhab/openhab-2/userdata/logs/10/trace.xml'
comLogF = '/Users/huongta/Home/Internship/openhab/openhab-2/userdata/logs/30/newe.log'
comLogS = '/Users/huongta/Home/Internship/openhab/openhab-2/userdata/logs/10/newe.log'

traceFile = '/Users/huongta/Home/Internship/openhab/openhab-2/userdata/logs/trace.xml'
ntrace = '/Users/huongta/Home/Internship/openhab/openhab-2/userdata/logs/ntrace.xml'

ItemStateChangedEvent = 'ItemStateChangedEvent'
ItemCommandEvent = 'ItemCommandEvent'
INFO = '[INFO ]'

parseValue = []
timestamp = ''
tag = ''
value = ''
generated_on = str(datetime.datetime.now())

def prettify(elem, tfile):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    myfile = open(tfile, "w")  
    myfile.write(str(reparsed.toprettyxml(indent="\t")))  
    return reparsed.toprettyxml(indent="  ")

def writeTrace(traceFile, cfile):
    trace = Element('trace')
    trace.set('version', '1.0')
    trace.append(Comment('Generated by HuongTA for M2R Project'))
    head = SubElement(trace, 'head')
    title = SubElement(head, 'title')
    title.text = 'My smart home data'
    dc = SubElement(head, 'dateCreated')
    dc.text = generated_on

    body = SubElement(trace, 'body')
    with open (cfile, 'rt') as f:
        line = f.readlines()
        print(len(line))
        getEvent(line[0], body)
        i=1
        while i < len(line)-1:           
            if INFO in line[i+1] and 'start' in line[i+1]:
                if ItemStateChangedEvent in line[i] or ItemCommandEvent in line[i] or 'GroupItemStateChangedEvent' in line[i]:
                    timestamp, tag, value = getArg(line[i])
                    trigger = SubElement(body, 'trigger',{'timestamp': timestamp, 'tag': "ItemStateChangedEvent", 'trigger': value})
                else:
                    trigger = SubElement(body, 'trigger')
                
                timestamp, tag, value = getArg(line[i+1])
                rule = SubElement(trigger, 'rule', OrderedDict([('timestamp', timestamp), ('tag', tag), ('rule', value)]))
                i=newLine(i,line, body)
                while INFO not in line[i+1] and 'finish' not in line[i+1]:   
                    getEvent(line[i+1], rule)
                    i=newLine(i,line, body)
                if INFO in line[i+1] and 'finish' in line[i+1]:
                    timestamp, tag, value = getArg(line[i+1])
                    SubElement(trigger, 'rule', OrderedDict([('timestamp', timestamp), ('tag', tag), ('rule', value)]))
                    i=newLine(i,line, body)
            else:
                getEvent(line[i], body)
            i=newLine(i,line, body)
    prettify(trace, traceFile)

def newLine(i, line, body):
    if i == len(line)-1:
        getEvent(line[i], body)
    else:
        i=i+1 
    return i

def getEvent(line, parent):
    timestamp, tag, value=getArg(line)
    if ItemCommandEvent in line:
        SubElement(parent, 'command',{'timestamp': timestamp, 'tag': "ItemCommandEvent", 'command': value})
    elif ItemStateChangedEvent in line:
        SubElement(parent, 'action', OrderedDict([('timestamp', timestamp), ('tag', "ItemStateChangedEvent"), ('action', value)]))
    else:
        SubElement(parent, 'event', OrderedDict([('timestamp', timestamp), ('tag', tag), ('event', value)]))    

def getArg(line):
    parseValue = parseLine(line)
    timestamp = parseValue[0]
    tag = parseValue[2]
    value = parseValue[1]
    return timestamp, tag, value

def parseLine(line):
    getV = []
    if '[' not in line:
        print(line)
    else:
        timestamp = line.split('[')[0]
        getV.append(timestamp)
        temp_value = line.split(' - ')
        value = temp_value[len(temp_value)-1].strip()
        getV.append(value)
        if '[INFO ]' in line:
            temp_value = line.split(INFO)[1]
            tag = temp_value[temp_value.find('[')+1 : temp_value.find(']')]
        else:
            tag = line[line.find('[')+1 : line.find(']')]
        getV.append(tag)
        return getV

if __name__ == "__main__":
    writeTrace(traceF, comLogF)
    writeTrace(traceS, comLogS)
